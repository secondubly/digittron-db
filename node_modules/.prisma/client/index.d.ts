
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model command_permissions
 * 
 */
export type command_permissions = $Result.DefaultSelection<Prisma.$command_permissionsPayload>
/**
 * Model commands
 * 
 */
export type commands = $Result.DefaultSelection<Prisma.$commandsPayload>
/**
 * Model settings
 * 
 */
export type settings = $Result.DefaultSelection<Prisma.$settingsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PermissionLevel: {
  VIEWER: 'VIEWER',
  FOLLOWER: 'FOLLOWER',
  REGULAR: 'REGULAR',
  VIP: 'VIP',
  SUBSCRIBER: 'SUBSCRIBER',
  MODERATOR: 'MODERATOR',
  EDITOR: 'EDITOR',
  BROADCASTER: 'BROADCASTER'
};

export type PermissionLevel = (typeof PermissionLevel)[keyof typeof PermissionLevel]

}

export type PermissionLevel = $Enums.PermissionLevel

export const PermissionLevel: typeof $Enums.PermissionLevel

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Command_permissions
 * const command_permissions = await prisma.command_permissions.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Command_permissions
   * const command_permissions = await prisma.command_permissions.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.command_permissions`: Exposes CRUD operations for the **command_permissions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Command_permissions
    * const command_permissions = await prisma.command_permissions.findMany()
    * ```
    */
  get command_permissions(): Prisma.command_permissionsDelegate<ExtArgs>;

  /**
   * `prisma.commands`: Exposes CRUD operations for the **commands** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commands
    * const commands = await prisma.commands.findMany()
    * ```
    */
  get commands(): Prisma.commandsDelegate<ExtArgs>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.settingsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    command_permissions: 'command_permissions',
    commands: 'commands',
    settings: 'settings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'command_permissions' | 'commands' | 'settings'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      command_permissions: {
        payload: Prisma.$command_permissionsPayload<ExtArgs>
        fields: Prisma.command_permissionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.command_permissionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.command_permissionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>
          }
          findFirst: {
            args: Prisma.command_permissionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.command_permissionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>
          }
          findMany: {
            args: Prisma.command_permissionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>[]
          }
          create: {
            args: Prisma.command_permissionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>
          }
          createMany: {
            args: Prisma.command_permissionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.command_permissionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>
          }
          update: {
            args: Prisma.command_permissionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>
          }
          deleteMany: {
            args: Prisma.command_permissionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.command_permissionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.command_permissionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$command_permissionsPayload>
          }
          aggregate: {
            args: Prisma.Command_permissionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommand_permissions>
          }
          groupBy: {
            args: Prisma.command_permissionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Command_permissionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.command_permissionsCountArgs<ExtArgs>,
            result: $Utils.Optional<Command_permissionsCountAggregateOutputType> | number
          }
        }
      }
      commands: {
        payload: Prisma.$commandsPayload<ExtArgs>
        fields: Prisma.commandsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commandsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commandsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>
          }
          findFirst: {
            args: Prisma.commandsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commandsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>
          }
          findMany: {
            args: Prisma.commandsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>[]
          }
          create: {
            args: Prisma.commandsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>
          }
          createMany: {
            args: Prisma.commandsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commandsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>
          }
          update: {
            args: Prisma.commandsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>
          }
          deleteMany: {
            args: Prisma.commandsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commandsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commandsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commandsPayload>
          }
          aggregate: {
            args: Prisma.CommandsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommands>
          }
          groupBy: {
            args: Prisma.commandsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommandsGroupByOutputType>[]
          }
          count: {
            args: Prisma.commandsCountArgs<ExtArgs>,
            result: $Utils.Optional<CommandsCountAggregateOutputType> | number
          }
        }
      }
      settings: {
        payload: Prisma.$settingsPayload<ExtArgs>
        fields: Prisma.settingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.settingsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.settingsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>
          }
          findFirst: {
            args: Prisma.settingsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.settingsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>
          }
          findMany: {
            args: Prisma.settingsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>[]
          }
          create: {
            args: Prisma.settingsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>
          }
          createMany: {
            args: Prisma.settingsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.settingsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>
          }
          update: {
            args: Prisma.settingsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>
          }
          deleteMany: {
            args: Prisma.settingsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.settingsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.settingsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$settingsPayload>
          }
          aggregate: {
            args: Prisma.SettingsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSettings>
          }
          groupBy: {
            args: Prisma.settingsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.settingsCountArgs<ExtArgs>,
            result: $Utils.Optional<SettingsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model command_permissions
   */

  export type AggregateCommand_permissions = {
    _count: Command_permissionsCountAggregateOutputType | null
    _min: Command_permissionsMinAggregateOutputType | null
    _max: Command_permissionsMaxAggregateOutputType | null
  }

  export type Command_permissionsMinAggregateOutputType = {
    name: string | null
    level: $Enums.PermissionLevel | null
  }

  export type Command_permissionsMaxAggregateOutputType = {
    name: string | null
    level: $Enums.PermissionLevel | null
  }

  export type Command_permissionsCountAggregateOutputType = {
    name: number
    level: number
    _all: number
  }


  export type Command_permissionsMinAggregateInputType = {
    name?: true
    level?: true
  }

  export type Command_permissionsMaxAggregateInputType = {
    name?: true
    level?: true
  }

  export type Command_permissionsCountAggregateInputType = {
    name?: true
    level?: true
    _all?: true
  }

  export type Command_permissionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which command_permissions to aggregate.
     */
    where?: command_permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of command_permissions to fetch.
     */
    orderBy?: command_permissionsOrderByWithRelationInput | command_permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: command_permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` command_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` command_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned command_permissions
    **/
    _count?: true | Command_permissionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Command_permissionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Command_permissionsMaxAggregateInputType
  }

  export type GetCommand_permissionsAggregateType<T extends Command_permissionsAggregateArgs> = {
        [P in keyof T & keyof AggregateCommand_permissions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommand_permissions[P]>
      : GetScalarType<T[P], AggregateCommand_permissions[P]>
  }




  export type command_permissionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: command_permissionsWhereInput
    orderBy?: command_permissionsOrderByWithAggregationInput | command_permissionsOrderByWithAggregationInput[]
    by: Command_permissionsScalarFieldEnum[] | Command_permissionsScalarFieldEnum
    having?: command_permissionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Command_permissionsCountAggregateInputType | true
    _min?: Command_permissionsMinAggregateInputType
    _max?: Command_permissionsMaxAggregateInputType
  }

  export type Command_permissionsGroupByOutputType = {
    name: string
    level: $Enums.PermissionLevel
    _count: Command_permissionsCountAggregateOutputType | null
    _min: Command_permissionsMinAggregateOutputType | null
    _max: Command_permissionsMaxAggregateOutputType | null
  }

  type GetCommand_permissionsGroupByPayload<T extends command_permissionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Command_permissionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Command_permissionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Command_permissionsGroupByOutputType[P]>
            : GetScalarType<T[P], Command_permissionsGroupByOutputType[P]>
        }
      >
    >


  export type command_permissionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    level?: boolean
    commands?: boolean | command_permissions$commandsArgs<ExtArgs>
  }, ExtArgs["result"]["command_permissions"]>

  export type command_permissionsSelectScalar = {
    name?: boolean
    level?: boolean
  }

  export type command_permissionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commands?: boolean | command_permissions$commandsArgs<ExtArgs>
  }


  export type $command_permissionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "command_permissions"
    objects: {
      commands: Prisma.$commandsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      level: $Enums.PermissionLevel
    }, ExtArgs["result"]["command_permissions"]>
    composites: {}
  }


  type command_permissionsGetPayload<S extends boolean | null | undefined | command_permissionsDefaultArgs> = $Result.GetResult<Prisma.$command_permissionsPayload, S>

  type command_permissionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<command_permissionsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Command_permissionsCountAggregateInputType | true
    }

  export interface command_permissionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['command_permissions'], meta: { name: 'command_permissions' } }
    /**
     * Find zero or one Command_permissions that matches the filter.
     * @param {command_permissionsFindUniqueArgs} args - Arguments to find a Command_permissions
     * @example
     * // Get one Command_permissions
     * const command_permissions = await prisma.command_permissions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends command_permissionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, command_permissionsFindUniqueArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Command_permissions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {command_permissionsFindUniqueOrThrowArgs} args - Arguments to find a Command_permissions
     * @example
     * // Get one Command_permissions
     * const command_permissions = await prisma.command_permissions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends command_permissionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, command_permissionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Command_permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {command_permissionsFindFirstArgs} args - Arguments to find a Command_permissions
     * @example
     * // Get one Command_permissions
     * const command_permissions = await prisma.command_permissions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends command_permissionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, command_permissionsFindFirstArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Command_permissions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {command_permissionsFindFirstOrThrowArgs} args - Arguments to find a Command_permissions
     * @example
     * // Get one Command_permissions
     * const command_permissions = await prisma.command_permissions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends command_permissionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, command_permissionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Command_permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {command_permissionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Command_permissions
     * const command_permissions = await prisma.command_permissions.findMany()
     * 
     * // Get first 10 Command_permissions
     * const command_permissions = await prisma.command_permissions.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const command_permissionsWithNameOnly = await prisma.command_permissions.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends command_permissionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, command_permissionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Command_permissions.
     * @param {command_permissionsCreateArgs} args - Arguments to create a Command_permissions.
     * @example
     * // Create one Command_permissions
     * const Command_permissions = await prisma.command_permissions.create({
     *   data: {
     *     // ... data to create a Command_permissions
     *   }
     * })
     * 
    **/
    create<T extends command_permissionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, command_permissionsCreateArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Command_permissions.
     *     @param {command_permissionsCreateManyArgs} args - Arguments to create many Command_permissions.
     *     @example
     *     // Create many Command_permissions
     *     const command_permissions = await prisma.command_permissions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends command_permissionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, command_permissionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Command_permissions.
     * @param {command_permissionsDeleteArgs} args - Arguments to delete one Command_permissions.
     * @example
     * // Delete one Command_permissions
     * const Command_permissions = await prisma.command_permissions.delete({
     *   where: {
     *     // ... filter to delete one Command_permissions
     *   }
     * })
     * 
    **/
    delete<T extends command_permissionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, command_permissionsDeleteArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Command_permissions.
     * @param {command_permissionsUpdateArgs} args - Arguments to update one Command_permissions.
     * @example
     * // Update one Command_permissions
     * const command_permissions = await prisma.command_permissions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends command_permissionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, command_permissionsUpdateArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Command_permissions.
     * @param {command_permissionsDeleteManyArgs} args - Arguments to filter Command_permissions to delete.
     * @example
     * // Delete a few Command_permissions
     * const { count } = await prisma.command_permissions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends command_permissionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, command_permissionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Command_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {command_permissionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Command_permissions
     * const command_permissions = await prisma.command_permissions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends command_permissionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, command_permissionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Command_permissions.
     * @param {command_permissionsUpsertArgs} args - Arguments to update or create a Command_permissions.
     * @example
     * // Update or create a Command_permissions
     * const command_permissions = await prisma.command_permissions.upsert({
     *   create: {
     *     // ... data to create a Command_permissions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Command_permissions we want to update
     *   }
     * })
    **/
    upsert<T extends command_permissionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, command_permissionsUpsertArgs<ExtArgs>>
    ): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Command_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {command_permissionsCountArgs} args - Arguments to filter Command_permissions to count.
     * @example
     * // Count the number of Command_permissions
     * const count = await prisma.command_permissions.count({
     *   where: {
     *     // ... the filter for the Command_permissions we want to count
     *   }
     * })
    **/
    count<T extends command_permissionsCountArgs>(
      args?: Subset<T, command_permissionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Command_permissionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Command_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Command_permissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Command_permissionsAggregateArgs>(args: Subset<T, Command_permissionsAggregateArgs>): Prisma.PrismaPromise<GetCommand_permissionsAggregateType<T>>

    /**
     * Group by Command_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {command_permissionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends command_permissionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: command_permissionsGroupByArgs['orderBy'] }
        : { orderBy?: command_permissionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, command_permissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommand_permissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the command_permissions model
   */
  readonly fields: command_permissionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for command_permissions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__command_permissionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    commands<T extends command_permissions$commandsArgs<ExtArgs> = {}>(args?: Subset<T, command_permissions$commandsArgs<ExtArgs>>): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the command_permissions model
   */ 
  interface command_permissionsFieldRefs {
    readonly name: FieldRef<"command_permissions", 'String'>
    readonly level: FieldRef<"command_permissions", 'PermissionLevel'>
  }
    

  // Custom InputTypes

  /**
   * command_permissions findUnique
   */
  export type command_permissionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * Filter, which command_permissions to fetch.
     */
    where: command_permissionsWhereUniqueInput
  }


  /**
   * command_permissions findUniqueOrThrow
   */
  export type command_permissionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * Filter, which command_permissions to fetch.
     */
    where: command_permissionsWhereUniqueInput
  }


  /**
   * command_permissions findFirst
   */
  export type command_permissionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * Filter, which command_permissions to fetch.
     */
    where?: command_permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of command_permissions to fetch.
     */
    orderBy?: command_permissionsOrderByWithRelationInput | command_permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for command_permissions.
     */
    cursor?: command_permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` command_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` command_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of command_permissions.
     */
    distinct?: Command_permissionsScalarFieldEnum | Command_permissionsScalarFieldEnum[]
  }


  /**
   * command_permissions findFirstOrThrow
   */
  export type command_permissionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * Filter, which command_permissions to fetch.
     */
    where?: command_permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of command_permissions to fetch.
     */
    orderBy?: command_permissionsOrderByWithRelationInput | command_permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for command_permissions.
     */
    cursor?: command_permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` command_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` command_permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of command_permissions.
     */
    distinct?: Command_permissionsScalarFieldEnum | Command_permissionsScalarFieldEnum[]
  }


  /**
   * command_permissions findMany
   */
  export type command_permissionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * Filter, which command_permissions to fetch.
     */
    where?: command_permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of command_permissions to fetch.
     */
    orderBy?: command_permissionsOrderByWithRelationInput | command_permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing command_permissions.
     */
    cursor?: command_permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` command_permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` command_permissions.
     */
    skip?: number
    distinct?: Command_permissionsScalarFieldEnum | Command_permissionsScalarFieldEnum[]
  }


  /**
   * command_permissions create
   */
  export type command_permissionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * The data needed to create a command_permissions.
     */
    data: XOR<command_permissionsCreateInput, command_permissionsUncheckedCreateInput>
  }


  /**
   * command_permissions createMany
   */
  export type command_permissionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many command_permissions.
     */
    data: command_permissionsCreateManyInput | command_permissionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * command_permissions update
   */
  export type command_permissionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * The data needed to update a command_permissions.
     */
    data: XOR<command_permissionsUpdateInput, command_permissionsUncheckedUpdateInput>
    /**
     * Choose, which command_permissions to update.
     */
    where: command_permissionsWhereUniqueInput
  }


  /**
   * command_permissions updateMany
   */
  export type command_permissionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update command_permissions.
     */
    data: XOR<command_permissionsUpdateManyMutationInput, command_permissionsUncheckedUpdateManyInput>
    /**
     * Filter which command_permissions to update
     */
    where?: command_permissionsWhereInput
  }


  /**
   * command_permissions upsert
   */
  export type command_permissionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * The filter to search for the command_permissions to update in case it exists.
     */
    where: command_permissionsWhereUniqueInput
    /**
     * In case the command_permissions found by the `where` argument doesn't exist, create a new command_permissions with this data.
     */
    create: XOR<command_permissionsCreateInput, command_permissionsUncheckedCreateInput>
    /**
     * In case the command_permissions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<command_permissionsUpdateInput, command_permissionsUncheckedUpdateInput>
  }


  /**
   * command_permissions delete
   */
  export type command_permissionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
    /**
     * Filter which command_permissions to delete.
     */
    where: command_permissionsWhereUniqueInput
  }


  /**
   * command_permissions deleteMany
   */
  export type command_permissionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which command_permissions to delete
     */
    where?: command_permissionsWhereInput
  }


  /**
   * command_permissions.commands
   */
  export type command_permissions$commandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    where?: commandsWhereInput
  }


  /**
   * command_permissions without action
   */
  export type command_permissionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the command_permissions
     */
    select?: command_permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: command_permissionsInclude<ExtArgs> | null
  }



  /**
   * Model commands
   */

  export type AggregateCommands = {
    _count: CommandsCountAggregateOutputType | null
    _avg: CommandsAvgAggregateOutputType | null
    _sum: CommandsSumAggregateOutputType | null
    _min: CommandsMinAggregateOutputType | null
    _max: CommandsMaxAggregateOutputType | null
  }

  export type CommandsAvgAggregateOutputType = {
    id: number | null
  }

  export type CommandsSumAggregateOutputType = {
    id: number | null
  }

  export type CommandsMinAggregateOutputType = {
    name: string | null
    response: string | null
    enabled: boolean | null
    visible: boolean | null
    id: number | null
  }

  export type CommandsMaxAggregateOutputType = {
    name: string | null
    response: string | null
    enabled: boolean | null
    visible: boolean | null
    id: number | null
  }

  export type CommandsCountAggregateOutputType = {
    name: number
    aliases: number
    response: number
    enabled: number
    visible: number
    id: number
    _all: number
  }


  export type CommandsAvgAggregateInputType = {
    id?: true
  }

  export type CommandsSumAggregateInputType = {
    id?: true
  }

  export type CommandsMinAggregateInputType = {
    name?: true
    response?: true
    enabled?: true
    visible?: true
    id?: true
  }

  export type CommandsMaxAggregateInputType = {
    name?: true
    response?: true
    enabled?: true
    visible?: true
    id?: true
  }

  export type CommandsCountAggregateInputType = {
    name?: true
    aliases?: true
    response?: true
    enabled?: true
    visible?: true
    id?: true
    _all?: true
  }

  export type CommandsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commands to aggregate.
     */
    where?: commandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commands to fetch.
     */
    orderBy?: commandsOrderByWithRelationInput | commandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commands
    **/
    _count?: true | CommandsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandsMaxAggregateInputType
  }

  export type GetCommandsAggregateType<T extends CommandsAggregateArgs> = {
        [P in keyof T & keyof AggregateCommands]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommands[P]>
      : GetScalarType<T[P], AggregateCommands[P]>
  }




  export type commandsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commandsWhereInput
    orderBy?: commandsOrderByWithAggregationInput | commandsOrderByWithAggregationInput[]
    by: CommandsScalarFieldEnum[] | CommandsScalarFieldEnum
    having?: commandsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandsCountAggregateInputType | true
    _avg?: CommandsAvgAggregateInputType
    _sum?: CommandsSumAggregateInputType
    _min?: CommandsMinAggregateInputType
    _max?: CommandsMaxAggregateInputType
  }

  export type CommandsGroupByOutputType = {
    name: string
    aliases: JsonValue | null
    response: string
    enabled: boolean
    visible: boolean
    id: number
    _count: CommandsCountAggregateOutputType | null
    _avg: CommandsAvgAggregateOutputType | null
    _sum: CommandsSumAggregateOutputType | null
    _min: CommandsMinAggregateOutputType | null
    _max: CommandsMaxAggregateOutputType | null
  }

  type GetCommandsGroupByPayload<T extends commandsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandsGroupByOutputType[P]>
            : GetScalarType<T[P], CommandsGroupByOutputType[P]>
        }
      >
    >


  export type commandsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    aliases?: boolean
    response?: boolean
    enabled?: boolean
    visible?: boolean
    id?: boolean
    command_permissions?: boolean | command_permissionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commands"]>

  export type commandsSelectScalar = {
    name?: boolean
    aliases?: boolean
    response?: boolean
    enabled?: boolean
    visible?: boolean
    id?: boolean
  }

  export type commandsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    command_permissions?: boolean | command_permissionsDefaultArgs<ExtArgs>
  }


  export type $commandsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "commands"
    objects: {
      command_permissions: Prisma.$command_permissionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      aliases: Prisma.JsonValue | null
      response: string
      enabled: boolean
      visible: boolean
      id: number
    }, ExtArgs["result"]["commands"]>
    composites: {}
  }


  type commandsGetPayload<S extends boolean | null | undefined | commandsDefaultArgs> = $Result.GetResult<Prisma.$commandsPayload, S>

  type commandsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<commandsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CommandsCountAggregateInputType | true
    }

  export interface commandsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commands'], meta: { name: 'commands' } }
    /**
     * Find zero or one Commands that matches the filter.
     * @param {commandsFindUniqueArgs} args - Arguments to find a Commands
     * @example
     * // Get one Commands
     * const commands = await prisma.commands.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commandsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commandsFindUniqueArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Commands that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commandsFindUniqueOrThrowArgs} args - Arguments to find a Commands
     * @example
     * // Get one Commands
     * const commands = await prisma.commands.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commandsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commandsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Commands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandsFindFirstArgs} args - Arguments to find a Commands
     * @example
     * // Get one Commands
     * const commands = await prisma.commands.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commandsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commandsFindFirstArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Commands that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandsFindFirstOrThrowArgs} args - Arguments to find a Commands
     * @example
     * // Get one Commands
     * const commands = await prisma.commands.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commandsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commandsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Commands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commands
     * const commands = await prisma.commands.findMany()
     * 
     * // Get first 10 Commands
     * const commands = await prisma.commands.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const commandsWithNameOnly = await prisma.commands.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends commandsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commandsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Commands.
     * @param {commandsCreateArgs} args - Arguments to create a Commands.
     * @example
     * // Create one Commands
     * const Commands = await prisma.commands.create({
     *   data: {
     *     // ... data to create a Commands
     *   }
     * })
     * 
    **/
    create<T extends commandsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commandsCreateArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Commands.
     *     @param {commandsCreateManyArgs} args - Arguments to create many Commands.
     *     @example
     *     // Create many Commands
     *     const commands = await prisma.commands.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commandsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commandsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Commands.
     * @param {commandsDeleteArgs} args - Arguments to delete one Commands.
     * @example
     * // Delete one Commands
     * const Commands = await prisma.commands.delete({
     *   where: {
     *     // ... filter to delete one Commands
     *   }
     * })
     * 
    **/
    delete<T extends commandsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commandsDeleteArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Commands.
     * @param {commandsUpdateArgs} args - Arguments to update one Commands.
     * @example
     * // Update one Commands
     * const commands = await prisma.commands.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commandsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commandsUpdateArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Commands.
     * @param {commandsDeleteManyArgs} args - Arguments to filter Commands to delete.
     * @example
     * // Delete a few Commands
     * const { count } = await prisma.commands.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commandsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commandsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commands
     * const commands = await prisma.commands.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commandsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commandsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commands.
     * @param {commandsUpsertArgs} args - Arguments to update or create a Commands.
     * @example
     * // Update or create a Commands
     * const commands = await prisma.commands.upsert({
     *   create: {
     *     // ... data to create a Commands
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commands we want to update
     *   }
     * })
    **/
    upsert<T extends commandsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commandsUpsertArgs<ExtArgs>>
    ): Prisma__commandsClient<$Result.GetResult<Prisma.$commandsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Commands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandsCountArgs} args - Arguments to filter Commands to count.
     * @example
     * // Count the number of Commands
     * const count = await prisma.commands.count({
     *   where: {
     *     // ... the filter for the Commands we want to count
     *   }
     * })
    **/
    count<T extends commandsCountArgs>(
      args?: Subset<T, commandsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandsAggregateArgs>(args: Subset<T, CommandsAggregateArgs>): Prisma.PrismaPromise<GetCommandsAggregateType<T>>

    /**
     * Group by Commands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commandsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commandsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commandsGroupByArgs['orderBy'] }
        : { orderBy?: commandsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commands model
   */
  readonly fields: commandsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commands.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commandsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    command_permissions<T extends command_permissionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, command_permissionsDefaultArgs<ExtArgs>>): Prisma__command_permissionsClient<$Result.GetResult<Prisma.$command_permissionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the commands model
   */ 
  interface commandsFieldRefs {
    readonly name: FieldRef<"commands", 'String'>
    readonly aliases: FieldRef<"commands", 'Json'>
    readonly response: FieldRef<"commands", 'String'>
    readonly enabled: FieldRef<"commands", 'Boolean'>
    readonly visible: FieldRef<"commands", 'Boolean'>
    readonly id: FieldRef<"commands", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * commands findUnique
   */
  export type commandsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * Filter, which commands to fetch.
     */
    where: commandsWhereUniqueInput
  }


  /**
   * commands findUniqueOrThrow
   */
  export type commandsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * Filter, which commands to fetch.
     */
    where: commandsWhereUniqueInput
  }


  /**
   * commands findFirst
   */
  export type commandsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * Filter, which commands to fetch.
     */
    where?: commandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commands to fetch.
     */
    orderBy?: commandsOrderByWithRelationInput | commandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commands.
     */
    cursor?: commandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commands.
     */
    distinct?: CommandsScalarFieldEnum | CommandsScalarFieldEnum[]
  }


  /**
   * commands findFirstOrThrow
   */
  export type commandsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * Filter, which commands to fetch.
     */
    where?: commandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commands to fetch.
     */
    orderBy?: commandsOrderByWithRelationInput | commandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commands.
     */
    cursor?: commandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commands.
     */
    distinct?: CommandsScalarFieldEnum | CommandsScalarFieldEnum[]
  }


  /**
   * commands findMany
   */
  export type commandsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * Filter, which commands to fetch.
     */
    where?: commandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commands to fetch.
     */
    orderBy?: commandsOrderByWithRelationInput | commandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commands.
     */
    cursor?: commandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commands.
     */
    skip?: number
    distinct?: CommandsScalarFieldEnum | CommandsScalarFieldEnum[]
  }


  /**
   * commands create
   */
  export type commandsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * The data needed to create a commands.
     */
    data: XOR<commandsCreateInput, commandsUncheckedCreateInput>
  }


  /**
   * commands createMany
   */
  export type commandsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commands.
     */
    data: commandsCreateManyInput | commandsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * commands update
   */
  export type commandsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * The data needed to update a commands.
     */
    data: XOR<commandsUpdateInput, commandsUncheckedUpdateInput>
    /**
     * Choose, which commands to update.
     */
    where: commandsWhereUniqueInput
  }


  /**
   * commands updateMany
   */
  export type commandsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commands.
     */
    data: XOR<commandsUpdateManyMutationInput, commandsUncheckedUpdateManyInput>
    /**
     * Filter which commands to update
     */
    where?: commandsWhereInput
  }


  /**
   * commands upsert
   */
  export type commandsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * The filter to search for the commands to update in case it exists.
     */
    where: commandsWhereUniqueInput
    /**
     * In case the commands found by the `where` argument doesn't exist, create a new commands with this data.
     */
    create: XOR<commandsCreateInput, commandsUncheckedCreateInput>
    /**
     * In case the commands was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commandsUpdateInput, commandsUncheckedUpdateInput>
  }


  /**
   * commands delete
   */
  export type commandsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
    /**
     * Filter which commands to delete.
     */
    where: commandsWhereUniqueInput
  }


  /**
   * commands deleteMany
   */
  export type commandsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commands to delete
     */
    where?: commandsWhereInput
  }


  /**
   * commands without action
   */
  export type commandsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commands
     */
    select?: commandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commandsInclude<ExtArgs> | null
  }



  /**
   * Model settings
   */

  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsAvgAggregateOutputType = {
    id: number | null
  }

  export type SettingsSumAggregateOutputType = {
    id: number | null
  }

  export type SettingsMinAggregateOutputType = {
    id: number | null
    name: string | null
    oauth: string | null
    refresh_token: string | null
  }

  export type SettingsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    oauth: string | null
    refresh_token: string | null
  }

  export type SettingsCountAggregateOutputType = {
    id: number
    name: number
    oauth: number
    refresh_token: number
    value: number
    _all: number
  }


  export type SettingsAvgAggregateInputType = {
    id?: true
  }

  export type SettingsSumAggregateInputType = {
    id?: true
  }

  export type SettingsMinAggregateInputType = {
    id?: true
    name?: true
    oauth?: true
    refresh_token?: true
  }

  export type SettingsMaxAggregateInputType = {
    id?: true
    name?: true
    oauth?: true
    refresh_token?: true
  }

  export type SettingsCountAggregateInputType = {
    id?: true
    name?: true
    oauth?: true
    refresh_token?: true
    value?: true
    _all?: true
  }

  export type SettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which settings to aggregate.
     */
    where?: settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of settings to fetch.
     */
    orderBy?: settingsOrderByWithRelationInput | settingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type settingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: settingsWhereInput
    orderBy?: settingsOrderByWithAggregationInput | settingsOrderByWithAggregationInput[]
    by: SettingsScalarFieldEnum[] | SettingsScalarFieldEnum
    having?: settingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _avg?: SettingsAvgAggregateInputType
    _sum?: SettingsSumAggregateInputType
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }

  export type SettingsGroupByOutputType = {
    id: number
    name: string
    oauth: string
    refresh_token: string
    value: JsonValue | null
    _count: SettingsCountAggregateOutputType | null
    _avg: SettingsAvgAggregateOutputType | null
    _sum: SettingsSumAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends settingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type settingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    oauth?: boolean
    refresh_token?: boolean
    value?: boolean
  }, ExtArgs["result"]["settings"]>

  export type settingsSelectScalar = {
    id?: boolean
    name?: boolean
    oauth?: boolean
    refresh_token?: boolean
    value?: boolean
  }


  export type $settingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "settings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      oauth: string
      refresh_token: string
      value: Prisma.JsonValue | null
    }, ExtArgs["result"]["settings"]>
    composites: {}
  }


  type settingsGetPayload<S extends boolean | null | undefined | settingsDefaultArgs> = $Result.GetResult<Prisma.$settingsPayload, S>

  type settingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<settingsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface settingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['settings'], meta: { name: 'settings' } }
    /**
     * Find zero or one Settings that matches the filter.
     * @param {settingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends settingsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, settingsFindUniqueArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Settings that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {settingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends settingsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, settingsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {settingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends settingsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, settingsFindFirstArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Settings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {settingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends settingsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, settingsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {settingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends settingsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, settingsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Settings.
     * @param {settingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
    **/
    create<T extends settingsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, settingsCreateArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Settings.
     *     @param {settingsCreateManyArgs} args - Arguments to create many Settings.
     *     @example
     *     // Create many Settings
     *     const settings = await prisma.settings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends settingsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, settingsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Settings.
     * @param {settingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
    **/
    delete<T extends settingsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, settingsDeleteArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Settings.
     * @param {settingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends settingsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, settingsUpdateArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {settingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends settingsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, settingsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {settingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends settingsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, settingsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Settings.
     * @param {settingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
    **/
    upsert<T extends settingsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, settingsUpsertArgs<ExtArgs>>
    ): Prisma__settingsClient<$Result.GetResult<Prisma.$settingsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {settingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends settingsCountArgs>(
      args?: Subset<T, settingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {settingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends settingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: settingsGroupByArgs['orderBy'] }
        : { orderBy?: settingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, settingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the settings model
   */
  readonly fields: settingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__settingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the settings model
   */ 
  interface settingsFieldRefs {
    readonly id: FieldRef<"settings", 'Int'>
    readonly name: FieldRef<"settings", 'String'>
    readonly oauth: FieldRef<"settings", 'String'>
    readonly refresh_token: FieldRef<"settings", 'String'>
    readonly value: FieldRef<"settings", 'Json'>
  }
    

  // Custom InputTypes

  /**
   * settings findUnique
   */
  export type settingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * Filter, which settings to fetch.
     */
    where: settingsWhereUniqueInput
  }


  /**
   * settings findUniqueOrThrow
   */
  export type settingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * Filter, which settings to fetch.
     */
    where: settingsWhereUniqueInput
  }


  /**
   * settings findFirst
   */
  export type settingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * Filter, which settings to fetch.
     */
    where?: settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of settings to fetch.
     */
    orderBy?: settingsOrderByWithRelationInput | settingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for settings.
     */
    cursor?: settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }


  /**
   * settings findFirstOrThrow
   */
  export type settingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * Filter, which settings to fetch.
     */
    where?: settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of settings to fetch.
     */
    orderBy?: settingsOrderByWithRelationInput | settingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for settings.
     */
    cursor?: settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }


  /**
   * settings findMany
   */
  export type settingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * Filter, which settings to fetch.
     */
    where?: settingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of settings to fetch.
     */
    orderBy?: settingsOrderByWithRelationInput | settingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing settings.
     */
    cursor?: settingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` settings.
     */
    skip?: number
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }


  /**
   * settings create
   */
  export type settingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * The data needed to create a settings.
     */
    data: XOR<settingsCreateInput, settingsUncheckedCreateInput>
  }


  /**
   * settings createMany
   */
  export type settingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many settings.
     */
    data: settingsCreateManyInput | settingsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * settings update
   */
  export type settingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * The data needed to update a settings.
     */
    data: XOR<settingsUpdateInput, settingsUncheckedUpdateInput>
    /**
     * Choose, which settings to update.
     */
    where: settingsWhereUniqueInput
  }


  /**
   * settings updateMany
   */
  export type settingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update settings.
     */
    data: XOR<settingsUpdateManyMutationInput, settingsUncheckedUpdateManyInput>
    /**
     * Filter which settings to update
     */
    where?: settingsWhereInput
  }


  /**
   * settings upsert
   */
  export type settingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * The filter to search for the settings to update in case it exists.
     */
    where: settingsWhereUniqueInput
    /**
     * In case the settings found by the `where` argument doesn't exist, create a new settings with this data.
     */
    create: XOR<settingsCreateInput, settingsUncheckedCreateInput>
    /**
     * In case the settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<settingsUpdateInput, settingsUncheckedUpdateInput>
  }


  /**
   * settings delete
   */
  export type settingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
    /**
     * Filter which settings to delete.
     */
    where: settingsWhereUniqueInput
  }


  /**
   * settings deleteMany
   */
  export type settingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which settings to delete
     */
    where?: settingsWhereInput
  }


  /**
   * settings without action
   */
  export type settingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the settings
     */
    select?: settingsSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Command_permissionsScalarFieldEnum: {
    name: 'name',
    level: 'level'
  };

  export type Command_permissionsScalarFieldEnum = (typeof Command_permissionsScalarFieldEnum)[keyof typeof Command_permissionsScalarFieldEnum]


  export const CommandsScalarFieldEnum: {
    name: 'name',
    aliases: 'aliases',
    response: 'response',
    enabled: 'enabled',
    visible: 'visible',
    id: 'id'
  };

  export type CommandsScalarFieldEnum = (typeof CommandsScalarFieldEnum)[keyof typeof CommandsScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    oauth: 'oauth',
    refresh_token: 'refresh_token',
    value: 'value'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'PermissionLevel'
   */
  export type EnumPermissionLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionLevel'>
    


  /**
   * Reference to a field of type 'PermissionLevel[]'
   */
  export type ListEnumPermissionLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionLevel[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type command_permissionsWhereInput = {
    AND?: command_permissionsWhereInput | command_permissionsWhereInput[]
    OR?: command_permissionsWhereInput[]
    NOT?: command_permissionsWhereInput | command_permissionsWhereInput[]
    name?: StringFilter<"command_permissions"> | string
    level?: EnumPermissionLevelFilter<"command_permissions"> | $Enums.PermissionLevel
    commands?: XOR<CommandsNullableRelationFilter, commandsWhereInput> | null
  }

  export type command_permissionsOrderByWithRelationInput = {
    name?: SortOrder
    level?: SortOrder
    commands?: commandsOrderByWithRelationInput
  }

  export type command_permissionsWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: command_permissionsWhereInput | command_permissionsWhereInput[]
    OR?: command_permissionsWhereInput[]
    NOT?: command_permissionsWhereInput | command_permissionsWhereInput[]
    level?: EnumPermissionLevelFilter<"command_permissions"> | $Enums.PermissionLevel
    commands?: XOR<CommandsNullableRelationFilter, commandsWhereInput> | null
  }, "name">

  export type command_permissionsOrderByWithAggregationInput = {
    name?: SortOrder
    level?: SortOrder
    _count?: command_permissionsCountOrderByAggregateInput
    _max?: command_permissionsMaxOrderByAggregateInput
    _min?: command_permissionsMinOrderByAggregateInput
  }

  export type command_permissionsScalarWhereWithAggregatesInput = {
    AND?: command_permissionsScalarWhereWithAggregatesInput | command_permissionsScalarWhereWithAggregatesInput[]
    OR?: command_permissionsScalarWhereWithAggregatesInput[]
    NOT?: command_permissionsScalarWhereWithAggregatesInput | command_permissionsScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"command_permissions"> | string
    level?: EnumPermissionLevelWithAggregatesFilter<"command_permissions"> | $Enums.PermissionLevel
  }

  export type commandsWhereInput = {
    AND?: commandsWhereInput | commandsWhereInput[]
    OR?: commandsWhereInput[]
    NOT?: commandsWhereInput | commandsWhereInput[]
    name?: StringFilter<"commands"> | string
    aliases?: JsonNullableFilter<"commands">
    response?: StringFilter<"commands"> | string
    enabled?: BoolFilter<"commands"> | boolean
    visible?: BoolFilter<"commands"> | boolean
    id?: IntFilter<"commands"> | number
    command_permissions?: XOR<Command_permissionsRelationFilter, command_permissionsWhereInput>
  }

  export type commandsOrderByWithRelationInput = {
    name?: SortOrder
    aliases?: SortOrderInput | SortOrder
    response?: SortOrder
    enabled?: SortOrder
    visible?: SortOrder
    id?: SortOrder
    command_permissions?: command_permissionsOrderByWithRelationInput
  }

  export type commandsWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: commandsWhereInput | commandsWhereInput[]
    OR?: commandsWhereInput[]
    NOT?: commandsWhereInput | commandsWhereInput[]
    aliases?: JsonNullableFilter<"commands">
    response?: StringFilter<"commands"> | string
    enabled?: BoolFilter<"commands"> | boolean
    visible?: BoolFilter<"commands"> | boolean
    id?: IntFilter<"commands"> | number
    command_permissions?: XOR<Command_permissionsRelationFilter, command_permissionsWhereInput>
  }, "name">

  export type commandsOrderByWithAggregationInput = {
    name?: SortOrder
    aliases?: SortOrderInput | SortOrder
    response?: SortOrder
    enabled?: SortOrder
    visible?: SortOrder
    id?: SortOrder
    _count?: commandsCountOrderByAggregateInput
    _avg?: commandsAvgOrderByAggregateInput
    _max?: commandsMaxOrderByAggregateInput
    _min?: commandsMinOrderByAggregateInput
    _sum?: commandsSumOrderByAggregateInput
  }

  export type commandsScalarWhereWithAggregatesInput = {
    AND?: commandsScalarWhereWithAggregatesInput | commandsScalarWhereWithAggregatesInput[]
    OR?: commandsScalarWhereWithAggregatesInput[]
    NOT?: commandsScalarWhereWithAggregatesInput | commandsScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"commands"> | string
    aliases?: JsonNullableWithAggregatesFilter<"commands">
    response?: StringWithAggregatesFilter<"commands"> | string
    enabled?: BoolWithAggregatesFilter<"commands"> | boolean
    visible?: BoolWithAggregatesFilter<"commands"> | boolean
    id?: IntWithAggregatesFilter<"commands"> | number
  }

  export type settingsWhereInput = {
    AND?: settingsWhereInput | settingsWhereInput[]
    OR?: settingsWhereInput[]
    NOT?: settingsWhereInput | settingsWhereInput[]
    id?: IntFilter<"settings"> | number
    name?: StringFilter<"settings"> | string
    oauth?: StringFilter<"settings"> | string
    refresh_token?: StringFilter<"settings"> | string
    value?: JsonNullableFilter<"settings">
  }

  export type settingsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    oauth?: SortOrder
    refresh_token?: SortOrder
    value?: SortOrderInput | SortOrder
  }

  export type settingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_name?: settingsIdNameCompoundUniqueInput
    AND?: settingsWhereInput | settingsWhereInput[]
    OR?: settingsWhereInput[]
    NOT?: settingsWhereInput | settingsWhereInput[]
    name?: StringFilter<"settings"> | string
    oauth?: StringFilter<"settings"> | string
    refresh_token?: StringFilter<"settings"> | string
    value?: JsonNullableFilter<"settings">
  }, "id" | "id_name">

  export type settingsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    oauth?: SortOrder
    refresh_token?: SortOrder
    value?: SortOrderInput | SortOrder
    _count?: settingsCountOrderByAggregateInput
    _avg?: settingsAvgOrderByAggregateInput
    _max?: settingsMaxOrderByAggregateInput
    _min?: settingsMinOrderByAggregateInput
    _sum?: settingsSumOrderByAggregateInput
  }

  export type settingsScalarWhereWithAggregatesInput = {
    AND?: settingsScalarWhereWithAggregatesInput | settingsScalarWhereWithAggregatesInput[]
    OR?: settingsScalarWhereWithAggregatesInput[]
    NOT?: settingsScalarWhereWithAggregatesInput | settingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"settings"> | number
    name?: StringWithAggregatesFilter<"settings"> | string
    oauth?: StringWithAggregatesFilter<"settings"> | string
    refresh_token?: StringWithAggregatesFilter<"settings"> | string
    value?: JsonNullableWithAggregatesFilter<"settings">
  }

  export type command_permissionsCreateInput = {
    name: string
    level?: $Enums.PermissionLevel
    commands?: commandsCreateNestedOneWithoutCommand_permissionsInput
  }

  export type command_permissionsUncheckedCreateInput = {
    name: string
    level?: $Enums.PermissionLevel
    commands?: commandsUncheckedCreateNestedOneWithoutCommand_permissionsInput
  }

  export type command_permissionsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumPermissionLevelFieldUpdateOperationsInput | $Enums.PermissionLevel
    commands?: commandsUpdateOneWithoutCommand_permissionsNestedInput
  }

  export type command_permissionsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumPermissionLevelFieldUpdateOperationsInput | $Enums.PermissionLevel
    commands?: commandsUncheckedUpdateOneWithoutCommand_permissionsNestedInput
  }

  export type command_permissionsCreateManyInput = {
    name: string
    level?: $Enums.PermissionLevel
  }

  export type command_permissionsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumPermissionLevelFieldUpdateOperationsInput | $Enums.PermissionLevel
  }

  export type command_permissionsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumPermissionLevelFieldUpdateOperationsInput | $Enums.PermissionLevel
  }

  export type commandsCreateInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response: string
    enabled?: boolean
    visible?: boolean
    id?: number
    command_permissions: command_permissionsCreateNestedOneWithoutCommandsInput
  }

  export type commandsUncheckedCreateInput = {
    name: string
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response: string
    enabled?: boolean
    visible?: boolean
    id?: number
  }

  export type commandsUpdateInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
    command_permissions?: command_permissionsUpdateOneRequiredWithoutCommandsNestedInput
  }

  export type commandsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
  }

  export type commandsCreateManyInput = {
    name: string
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response: string
    enabled?: boolean
    visible?: boolean
    id?: number
  }

  export type commandsUpdateManyMutationInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
  }

  export type commandsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
  }

  export type settingsCreateInput = {
    name: string
    oauth: string
    refresh_token: string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type settingsUncheckedCreateInput = {
    id?: number
    name: string
    oauth: string
    refresh_token: string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type settingsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    oauth?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type settingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    oauth?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type settingsCreateManyInput = {
    id?: number
    name: string
    oauth: string
    refresh_token: string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type settingsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    oauth?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type settingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    oauth?: StringFieldUpdateOperationsInput | string
    refresh_token?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumPermissionLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionLevel | EnumPermissionLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionLevelFilter<$PrismaModel> | $Enums.PermissionLevel
  }

  export type CommandsNullableRelationFilter = {
    is?: commandsWhereInput | null
    isNot?: commandsWhereInput | null
  }

  export type command_permissionsCountOrderByAggregateInput = {
    name?: SortOrder
    level?: SortOrder
  }

  export type command_permissionsMaxOrderByAggregateInput = {
    name?: SortOrder
    level?: SortOrder
  }

  export type command_permissionsMinOrderByAggregateInput = {
    name?: SortOrder
    level?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumPermissionLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionLevel | EnumPermissionLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionLevelWithAggregatesFilter<$PrismaModel> | $Enums.PermissionLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionLevelFilter<$PrismaModel>
    _max?: NestedEnumPermissionLevelFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type Command_permissionsRelationFilter = {
    is?: command_permissionsWhereInput
    isNot?: command_permissionsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type commandsCountOrderByAggregateInput = {
    name?: SortOrder
    aliases?: SortOrder
    response?: SortOrder
    enabled?: SortOrder
    visible?: SortOrder
    id?: SortOrder
  }

  export type commandsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type commandsMaxOrderByAggregateInput = {
    name?: SortOrder
    response?: SortOrder
    enabled?: SortOrder
    visible?: SortOrder
    id?: SortOrder
  }

  export type commandsMinOrderByAggregateInput = {
    name?: SortOrder
    response?: SortOrder
    enabled?: SortOrder
    visible?: SortOrder
    id?: SortOrder
  }

  export type commandsSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type settingsIdNameCompoundUniqueInput = {
    id: number
    name: string
  }

  export type settingsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    oauth?: SortOrder
    refresh_token?: SortOrder
    value?: SortOrder
  }

  export type settingsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type settingsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    oauth?: SortOrder
    refresh_token?: SortOrder
  }

  export type settingsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    oauth?: SortOrder
    refresh_token?: SortOrder
  }

  export type settingsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type commandsCreateNestedOneWithoutCommand_permissionsInput = {
    create?: XOR<commandsCreateWithoutCommand_permissionsInput, commandsUncheckedCreateWithoutCommand_permissionsInput>
    connectOrCreate?: commandsCreateOrConnectWithoutCommand_permissionsInput
    connect?: commandsWhereUniqueInput
  }

  export type commandsUncheckedCreateNestedOneWithoutCommand_permissionsInput = {
    create?: XOR<commandsCreateWithoutCommand_permissionsInput, commandsUncheckedCreateWithoutCommand_permissionsInput>
    connectOrCreate?: commandsCreateOrConnectWithoutCommand_permissionsInput
    connect?: commandsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumPermissionLevelFieldUpdateOperationsInput = {
    set?: $Enums.PermissionLevel
  }

  export type commandsUpdateOneWithoutCommand_permissionsNestedInput = {
    create?: XOR<commandsCreateWithoutCommand_permissionsInput, commandsUncheckedCreateWithoutCommand_permissionsInput>
    connectOrCreate?: commandsCreateOrConnectWithoutCommand_permissionsInput
    upsert?: commandsUpsertWithoutCommand_permissionsInput
    disconnect?: commandsWhereInput | boolean
    delete?: commandsWhereInput | boolean
    connect?: commandsWhereUniqueInput
    update?: XOR<XOR<commandsUpdateToOneWithWhereWithoutCommand_permissionsInput, commandsUpdateWithoutCommand_permissionsInput>, commandsUncheckedUpdateWithoutCommand_permissionsInput>
  }

  export type commandsUncheckedUpdateOneWithoutCommand_permissionsNestedInput = {
    create?: XOR<commandsCreateWithoutCommand_permissionsInput, commandsUncheckedCreateWithoutCommand_permissionsInput>
    connectOrCreate?: commandsCreateOrConnectWithoutCommand_permissionsInput
    upsert?: commandsUpsertWithoutCommand_permissionsInput
    disconnect?: commandsWhereInput | boolean
    delete?: commandsWhereInput | boolean
    connect?: commandsWhereUniqueInput
    update?: XOR<XOR<commandsUpdateToOneWithWhereWithoutCommand_permissionsInput, commandsUpdateWithoutCommand_permissionsInput>, commandsUncheckedUpdateWithoutCommand_permissionsInput>
  }

  export type command_permissionsCreateNestedOneWithoutCommandsInput = {
    create?: XOR<command_permissionsCreateWithoutCommandsInput, command_permissionsUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: command_permissionsCreateOrConnectWithoutCommandsInput
    connect?: command_permissionsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type command_permissionsUpdateOneRequiredWithoutCommandsNestedInput = {
    create?: XOR<command_permissionsCreateWithoutCommandsInput, command_permissionsUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: command_permissionsCreateOrConnectWithoutCommandsInput
    upsert?: command_permissionsUpsertWithoutCommandsInput
    connect?: command_permissionsWhereUniqueInput
    update?: XOR<XOR<command_permissionsUpdateToOneWithWhereWithoutCommandsInput, command_permissionsUpdateWithoutCommandsInput>, command_permissionsUncheckedUpdateWithoutCommandsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumPermissionLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionLevel | EnumPermissionLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionLevelFilter<$PrismaModel> | $Enums.PermissionLevel
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumPermissionLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionLevel | EnumPermissionLevelFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionLevel[] | ListEnumPermissionLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionLevelWithAggregatesFilter<$PrismaModel> | $Enums.PermissionLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionLevelFilter<$PrismaModel>
    _max?: NestedEnumPermissionLevelFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type commandsCreateWithoutCommand_permissionsInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response: string
    enabled?: boolean
    visible?: boolean
    id?: number
  }

  export type commandsUncheckedCreateWithoutCommand_permissionsInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response: string
    enabled?: boolean
    visible?: boolean
    id?: number
  }

  export type commandsCreateOrConnectWithoutCommand_permissionsInput = {
    where: commandsWhereUniqueInput
    create: XOR<commandsCreateWithoutCommand_permissionsInput, commandsUncheckedCreateWithoutCommand_permissionsInput>
  }

  export type commandsUpsertWithoutCommand_permissionsInput = {
    update: XOR<commandsUpdateWithoutCommand_permissionsInput, commandsUncheckedUpdateWithoutCommand_permissionsInput>
    create: XOR<commandsCreateWithoutCommand_permissionsInput, commandsUncheckedCreateWithoutCommand_permissionsInput>
    where?: commandsWhereInput
  }

  export type commandsUpdateToOneWithWhereWithoutCommand_permissionsInput = {
    where?: commandsWhereInput
    data: XOR<commandsUpdateWithoutCommand_permissionsInput, commandsUncheckedUpdateWithoutCommand_permissionsInput>
  }

  export type commandsUpdateWithoutCommand_permissionsInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
  }

  export type commandsUncheckedUpdateWithoutCommand_permissionsInput = {
    aliases?: NullableJsonNullValueInput | InputJsonValue
    response?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    id?: IntFieldUpdateOperationsInput | number
  }

  export type command_permissionsCreateWithoutCommandsInput = {
    name: string
    level?: $Enums.PermissionLevel
  }

  export type command_permissionsUncheckedCreateWithoutCommandsInput = {
    name: string
    level?: $Enums.PermissionLevel
  }

  export type command_permissionsCreateOrConnectWithoutCommandsInput = {
    where: command_permissionsWhereUniqueInput
    create: XOR<command_permissionsCreateWithoutCommandsInput, command_permissionsUncheckedCreateWithoutCommandsInput>
  }

  export type command_permissionsUpsertWithoutCommandsInput = {
    update: XOR<command_permissionsUpdateWithoutCommandsInput, command_permissionsUncheckedUpdateWithoutCommandsInput>
    create: XOR<command_permissionsCreateWithoutCommandsInput, command_permissionsUncheckedCreateWithoutCommandsInput>
    where?: command_permissionsWhereInput
  }

  export type command_permissionsUpdateToOneWithWhereWithoutCommandsInput = {
    where?: command_permissionsWhereInput
    data: XOR<command_permissionsUpdateWithoutCommandsInput, command_permissionsUncheckedUpdateWithoutCommandsInput>
  }

  export type command_permissionsUpdateWithoutCommandsInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumPermissionLevelFieldUpdateOperationsInput | $Enums.PermissionLevel
  }

  export type command_permissionsUncheckedUpdateWithoutCommandsInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: EnumPermissionLevelFieldUpdateOperationsInput | $Enums.PermissionLevel
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use command_permissionsDefaultArgs instead
     */
    export type command_permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = command_permissionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use commandsDefaultArgs instead
     */
    export type commandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = commandsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use settingsDefaultArgs instead
     */
    export type settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = settingsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}